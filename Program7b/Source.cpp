/*
Chris Walter 
Date 5/9/2015
Program 7

Algorithm: Simulating a TCP Network and Printing out Network Log

1. Created Doubly Linked Template List with List and Node classes
	Created a struct: Pkt, which is part of List.h to serve as network packets
2. Implement a Merge Sort (Modified version of Mr. Hare's code in class)
3. Implement two host a Sender and Receiver
	These two will be the nodes in our simulations network
4. Implemnet a Network Class
	The Network class simulates the inconsistencies of a real network
	It does this by this by corrupting 2% pkts, shuffling 33% and dropping 2%

5 Creating output:
	Output is the form a Network Log
	All major operations are recorded for each round in the network
	At the end of each rouch a Summery is printed out
	The Summary shows the contents of each list
		
		The Summy is formatted as follows
			A. Type of list Inbox/Outbox
			B. Prinout of Head Ptr value and address
			C. Sequential printout of each nodes data and ptrs
			D. Printout of Tail Ptr value and address

*/




#include <iostream>
#include <fstream>
#include "List.h"
#include <stdio.h>      /* printf, scanf, puts, NULL */
#include <stdlib.h>     /* srand, rand */
#include <time.h>       /* time */
#include "Sender.h"
#include "Receiver.h"
#include "Network.h"
#include <fstream>
using namespace std;




//git random comment
int main(){
	
	//How many Packets would you like to send?
	cout << "TCP Network Simulation by Chris Walter." << endl << endl;
	int nPkts;
	while (true){
		cout << "Please Enter the Number of Packets Here: ";
		cin >> nPkts;
		if (nPkts < 1 || nPkts >300){
			cout << "Please Enter a number between 1 and 300" << endl;
		}
		else{
			cout << "Preparing Network..." << endl;
			break;
		}
	}


	//file for outputing Network log
	ofstream fout("log.txt"); 
	fout <<endl<<endl<< "******************************************************" << endl;
	fout << "Network Log Generated by Chris Walter" << endl;
	fout << "Pkt drop rate: 3% Corrupt: 2% Shuffle: 33% " << endl;
	fout << "After Each Round a Summery of Each inbox/Outbot is Provided" << endl << endl;
	fout << "******************************************************" << endl << endl << endl;

	srand(time(NULL));

	//Creating Network Objects
	Sender sender;
	Receiver rec;
	Network network;

	//passing file output stream to each class
	network.setFout(&fout);
	sender.setFout(&fout);
	sender.inPkts.setFout(&fout);
	sender.outPkts.setFout(&fout);
	rec.setFout(&fout);
	rec.rAckBox.setFout(&fout);
	rec.rInbox.setFout(&fout);
	
	
	///Main Control Loop for Network ///
	
	int roundCnt = 0;
	sender.setup(nPkts);
	rec.setup();

	//One Loop represents one round---->
	while (sender.finished() == false){
		sender.process();
		rec.process();
		network.pick_up(sender);
		network.pick_up(rec);
		network.deliver(sender);
		network.deliver(rec);

		roundCnt++;
		fout <<endl<<"<----------------------" "Round "<< roundCnt << " List Summary " << "---------------------->"<<endl;
		fout << "<--Sender Inbox: ";
		sender.inPkts.printList();
		fout << "<--Sender Outbox: ";
		sender.outPkts.printList();
		fout << "<--Receiver Inbox: ";
		rec.rInbox.printList();
		fout << "<--Receiver Outbox: ";
		rec.rAckBox.printList();
		fout << "<--------------------------" <<"End Round: " << roundCnt << "-------------------------->" << endl<<endl;
		
	}
	
	fout.close();
	cout << "Log.txt file has been created." << endl;

	system("pause");
	return 0;
}
